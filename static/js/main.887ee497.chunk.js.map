{"version":3,"sources":["AppForm.jsx","App.js","serviceWorker.js","index.js"],"names":["AppForm","useState","emailValid","setEmailValid","signUpForm","setSignUpForm","handleInput","key","e","target","value","submitHandler","a","preventDefault","requestOptions","method","headers","body","JSON","stringify","firstName","lastName","email","password","fetch","then","response","json","data","status","alert","errors","message","catch","error","setState","errorMessage","toString","console","Container","Col","Form","onSubmit","Group","controlId","Control","type","placeholder","onChange","autoComplete","emailValdation","responseJson","onInput","Button","variant","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.887ee497.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Button, Form, Container, Col } from 'react-bootstrap';\r\n\r\nexport default function AppForm() {\r\n\r\n  const [emailValid, setEmailValid] = useState(true);\r\n\r\n  const [signUpForm, setSignUpForm] = useState({\r\n    \"campaignUuid\": \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\r\n    \"data\": {\r\n     \"firstName\": \"\",\r\n     \"lastName\": \"\",\r\n     \"email\": \"\",\r\n     \"password\": \"\"\r\n    }\r\n   });\r\n   const handleEmail = (e)=>{\r\n    const emailValdation = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        \"campaignUuid\": \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\r\n        \"data\":{\r\n        \"email\": signUpForm.email,\r\n        }\r\n      })\r\n  };\r\n  fetch('https://api.raisely.com/v3/check-user',emailValdation)\r\n  .then(async response=>{\r\n    const responseJson = await response.json()\r\n    if(responseJson.data.status ===\"OK\"){\r\n      setEmailValid(true)\r\n    }\r\n    else if(responseJson.data.status === \"EXISTS\"){\r\n      setEmailValid(false)\r\n      alert(\"Email already exists, please use another one\")\r\n    }\r\n   })\r\n  }\r\n   const handleInput = (key)=> (e) => {\r\n     setSignUpForm ({ ...signUpForm, [key]:e.target.value});\r\n   }\r\n   const submitHandler= async (e)=> {\r\n    e.preventDefault();\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          \"campaignUuid\": \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\r\n          \"data\": {\r\n           \"firstName\": signUpForm.firstName,\r\n           \"lastName\": signUpForm.lastName,\r\n           \"email\": signUpForm.email,\r\n           \"password\": signUpForm.password\r\n          }\r\n        })\r\n    };\r\n\r\n\r\n      if(emailValid){\r\n        fetch('https://api.raisely.com/v3/signup', requestOptions)\r\n        .then(async response => {\r\n            const data = await response.json();\r\n            if (data.status < 200 || data.status > 299){\r\n             alert( data.errors[0].message)\r\n            }\r\n          })\r\n\r\n        .catch(error => {\r\n            this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n        });\r\n      }\r\n      else if(!emailValid){\r\n        alert(\"Email is not valid\")\r\n      }\r\n}\r\n    return (\r\n        <Container>\r\n            <Col>\r\n            <h1>Welcome to my attempt of getting a job with Raisely </h1>\r\n        <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Control type=\"name\" placeholder=\"First Name\" onChange={handleInput('firstName')} />\r\n          </Form.Group>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Control type=\"name\" placeholder=\"Last Name\" onChange={handleInput('lastName')} />\r\n          </Form.Group>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Control autoComplete=\"off\" type=\"email\" placeholder=\"Enter email\"  onChange={handleInput('email')} />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Control type=\"password\" placeholder=\"Password\"onChange={handleEmail} onInput={handleInput('password')}/>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\" className=\"submitButton\" >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      </Col>\r\n      </Container>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Form from \"./AppForm\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}